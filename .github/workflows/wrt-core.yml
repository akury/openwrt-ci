# 云编译公用核心
name: Wrt Core

on:
  workflow_call:
    inputs:
      # 编译配置文件名
      WRT_CONFIG:
        required: true
        type: string
      # 默认主机名
      WRT_NAME:
        required: true
        type: string
      # 默认WIFI名称
      WRT_SSID:
        required: true
        type: string
      # 默认WIFI密码
      WRT_WORD:
        required: true
        type: string
      # 默认登录IP地址
      WRT_IP:
        required: true
        type: string
      # 默认密码
      WRT_PW:
        required: true
        type: string
      # 源码链接
      WRT_REPO:
        required: true
        type: string
      # 源码分支
      WRT_BRANCH:
        required: true
        type: string
      # 源码名称
      WRT_SOURCE:
        required: true
        type: string
      # 插件调整
      WRT_PACKAGE:
        required: false
        type: string
      # 仅输出配置文件
      WRT_TEST:
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_SSID: ${{inputs.WRT_SSID}}
  WRT_WORD: ${{inputs.WRT_WORD}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_SOURCE: ${{inputs.WRT_SOURCE}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}

jobs:
  core:
    name: ${{inputs.WRT_SOURCE}}
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq purge firefox google-chrome* dotnet* 
          sudo -E apt -yqq update
          sudo -E apt -yqq install build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq clean

          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          
          sudo mkdir -p /mnt/build_wrt
          sudo chown $USER:$USER /mnt/build_wrt
          sudo ln -s /mnt/build_wrt $GITHUB_WORKSPACE/wrt

      - name: Initialization Values
        run: |
          echo "WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d-%H.%M.%S")" >> $GITHUB_ENV
          echo "WRT_MARK=${GITHUB_REPOSITORY%%/*}" >> $GITHUB_ENV
          echo "WRT_INFO=${WRT_SOURCE%%/*}" >> $GITHUB_ENV
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' ./configs/$WRT_CONFIG.config)" >> $GITHUB_ENV
          echo "WRT_KVER=none" >> $GITHUB_ENV
          echo "WRT_LIST=none" >> $GITHUB_ENV
          echo "CACHE_KEY_PREFIX=${WRT_CONFIG}-${WRT_SOURCE%%/*}" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/

          cd ./wrt/
          echo "WRT_VERSION_AUTHOR=$(git log -1 --pretty=format:'%an')" >> $GITHUB_ENV
          echo "WRT_VERSION_TIME=$(git log -1 --pretty=format:'%ci')" >> $GITHUB_ENV
          echo "WRT_VERSION_HASH=$(git log -1 --pretty=format:'%H')" >> $GITHUB_ENV

      - name: Check Caches
        id: check-cache
        if: env.WRT_TEST != 'true'
        uses: actions/cache@main
        with:
          key: ${{env.CACHE_KEY_PREFIX}}-${{env.WRT_VERSION_HASH}}
          restore-keys: ${{env.CACHE_KEY_PREFIX}}
          path: |
            ./wrt/.ccache
            ./wrt/staging_dir/host*
            ./wrt/staging_dir/tool*

      - name: Update Feeds
        run: |
          cd ./wrt/

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages
        run: |
          cd ./wrt/package/

          $GITHUB_WORKSPACE/scripts/packages.sh

      - name: Custom Settings
        run: |
          cd ./wrt/

          cp $GITHUB_WORKSPACE/configs/$WRT_CONFIG.config .config

          if [ -n "$WRT_PACKAGE" ]; then
            echo -e "$WRT_PACKAGE" >> ./.config
          fi

          $GITHUB_WORKSPACE/scripts/settings.sh

          make defconfig

      - name: Download Packages
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make download -j$(nproc)

      - name: Compile Firmware
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make -j$(nproc) || make -j1 || make -j1 V=s

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -f ./.config ./upload/Config-"$WRT_CONFIG"-"$WRT_DATE".txt

          if [[ $WRT_TEST != 'true' ]]; then
            echo "WRT_KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)" >> $GITHUB_ENV
            echo "WRT_LIST=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^luci-(app|theme)[^ ]*' {} \; | tr '\n' ' ')" >> $GITHUB_ENV

            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|sha256sums\|packages\)$" -exec rm -rf {} +

            for FILE in $(find ./bin/targets/ -type f -iname "*$WRT_TARGET*") ; do
              EXT=$(basename $FILE | cut -d '.' -f 2-)
              NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($WRT_TARGET\).*")
              NEW_FILE="$NAME"-"$WRT_DATE"."$EXT"
              mv -f $FILE ./upload/$NEW_FILE
            done

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;
          fi

      - name: Release Firmware
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.WRT_CONFIG}}-${{env.WRT_DATE}}
          files: ./wrt/upload/*.*
          body: |
            ### 固件信息
            - 固件源码：${{env.WRT_REPO}}
            - 源码分支：${{env.WRT_BRANCH}}
            - 固件配置：${{env.WRT_CONFIG}}
            - 登录地址：${{env.WRT_IP}}
            - 登录密码：${{env.WRT_PW}}
            - WIFI名称：${{env.WRT_SSID}}
            - WIFI密码：${{env.WRT_WORD}}
            - 插件列表：${{env.WRT_LIST}}

            ### 固件版本
            - 固件内核版本：${{env.WRT_KVER}}
            - 代码最后一次提交：
              - 作者：${{env.WRT_VERSION_AUTHOR}}
              - 时间：${{env.WRT_VERSION_TIME}}
              - Hash：${{env.WRT_VERSION_HASH}}
